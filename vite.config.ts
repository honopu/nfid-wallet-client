import { defineConfig, loadEnv } from "vite"
import reactRefresh from "@vitejs/plugin-react-refresh"
import tsconfigPaths from "vite-tsconfig-paths"
import dfxJson from "./dfx.json"

type Network = "ic" | "local"

interface CanisterIds {
  [key: string]: { [key in Network]: string }
}

// Gets the port dfx is running on from dfx.json
const DFX_PORT = dfxJson.networks.local.bind.split(":")[1]

// See guide on how to configure Vite at:
// https://vitejs.dev/config/
export default ({ mode }) => {
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) }
  const isDev = process.env["DFX_NETWORK"] !== "ic"

  return defineConfig({
    build: {
      // TODO: THIS BLOCKS OUT OLDER BROWSER
      // required for BigInt (biguintle) support
      target: ["es2020"],
    },
    plugins: [reactRefresh(), tsconfigPaths()],
    resolve: {
      alias: {
        // Here we tell Vite the "fake" modules that we want to define
        // ...aliases,
        assert: require.resolve("assert/"),
        buffer: require.resolve("buffer/"),
        events: require.resolve("events/"),
        stream: require.resolve("stream-browserify/"),
        util: require.resolve("util/"),
      },
    },
    server: {
      hmr: false,
      cors: true,
      port: 9090,
      fs: {
        allow: ["."],
      },
      proxy: {
        // This proxies all http requests made to /api to our running dfx instance
        "/api": {
          target: `http://0.0.0.0:${DFX_PORT}`,
        },
        "/verify": {
          target: process.env.VITE_AWS_VERIFY_PHONENUMBER,
          secure: true,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/verify/, ""),
        },
      },
    },
    define: {
      // Here we can define global constants
      // This is required for now because the code generated by dfx relies on process.env being set
      // ...canisterDefinitions,
      "process.env.NODE_ENV": JSON.stringify(
        isDev ? "development" : "production",
      ),
    },
  })
}
